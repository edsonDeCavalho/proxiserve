plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.dagger.hilt.android'
//    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
//    id 'com.google.devtools.ksp' version '1.9.24-1.0.20'
//    id 'io.sentry.android.gradle' version '4.2.0'
}

android {
    namespace 'com.proxiserve.proximobilite'
    compileSdk 34

    defaultConfig {
        applicationId "com.proxiserve.proximobilite"
        minSdk 31
        targetSdk 34
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "com.proxiserve.proximobilite.HiltTestRunner"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/*'
        }
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
//    applicationVariants.all { varant ->
//        kotlin.sourceSets {
//            getByName(varant.name) {
//                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
//            }
//        }
//    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation('androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.5')
    implementation('androidx.activity:activity-ktx:1.9.2')
//    implementation 'androidx.compose.material3:material3:1.2.1'
    implementation("androidx.compose.material3:material3:1.3.0")
    implementation 'androidx.activity:activity-compose:1.9.2'
    implementation "androidx.compose.material:material-icons-extended:1.7.0"
    implementation("androidx.compose.animation:animation:1.7.0")

    // SDK Okta
    implementation(platform('com.okta.kotlin:bom:1.0.0'))
    // SDK Okta partie ui
    implementation('com.okta.kotlin:auth-foundation-bootstrap')
    implementation('com.okta.kotlin:web-authentication-ui')

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:33.1.1')

    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'

    // Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.49"
    implementation 'androidx.navigation:navigation-testing:2.8.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.testng:testng:6.9.6'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    ksp 'com.google.dagger:hilt-android-compiler:2.49'
//    kapt "com.google.dagger:hilt-android-compiler:2.49"

    implementation 'com.google.android.libraries.places:places:3.5.0'
    implementation 'androidx.compose.runtime:runtime-livedata:1.7.0'
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    ksp 'androidx.hilt:hilt-compiler:1.2.0'
//    kapt "androidx.hilt:hilt-compiler:1.2.0"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0"

    // Room
    implementation "androidx.room:room-runtime:2.6.1"
    ksp 'androidx.room:room-compiler:2.6.1'
//    kapt "androidx.room:room-compiler:2.6.1"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.6.1"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'

    //
    implementation 'com.google.firebase:firebase-auth-ktx:23.0.0'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.8.0'

    // gif
    implementation("com.google.accompanist:accompanist-drawablepainter:0.35.0-alpha")

    //camera
    implementation "androidx.camera:camera-core:1.4.1"
    implementation "androidx.camera:camera-camera2:1.4.1"

    implementation "androidx.camera:camera-lifecycle:1.4.1"
    implementation "androidx.camera:camera-video:1.4.1"
    implementation "androidx.camera:camera-view:1.4.1"
    implementation "androidx.camera:camera-extensions:1.4.1"

//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
//    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
//    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
//    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    // Local unit tests
    // Pour les tests unitaires locaux (\test\ exécutés par la jvm, pas besoin de device Android)
    testImplementation "androidx.test:core:1.6.1"
    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1"
    testImplementation "com.google.truth:truth:1.1.3" // pour faciliter les assertions (mieux que junit)
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.1" // pour tester api en simulant une réponse server
    testImplementation "io.mockk:mockk:1.13.8"
    debugImplementation "androidx.compose.ui:ui-test-manifest:1.7.5"
    debugImplementation "androidx.compose.ui:ui-tooling:1.7.5"

    testImplementation "org.mockito:mockito-core:5.12.0"
    testImplementation "org.mockito:mockito-inline:5.2.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.4.0"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.0"
    testImplementation "androidx.arch.core:core-testing:2.2.0"

    // Instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:2.49"
    kspAndroidTest "com.google.dagger:hilt-android-compiler:2.49"
    androidTestImplementation "junit:junit:4.13.2"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1"
    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:core-ktx:1.6.1'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.9.1"
    androidTestImplementation "io.mockk:mockk-android:1.13.8"
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.7.5"
    androidTestImplementation "org.mockito:mockito-core:5.12.0"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.navigation:navigation-testing:2.8.4'

}

// Properties Okta
def oktaProperties = new Properties()
def mobilityProperties = new Properties()
rootProject.file("okta.properties").withInputStream { oktaProperties.load(it) }
rootProject.file("mobility.properties").withInputStream { oktaProperties.load(it) }
android.defaultConfig {
    buildConfigField "String", 'DISCOVERY_URL', "\"${oktaProperties.getProperty('discoveryUrl')}\""
    buildConfigField "String", 'CLIENT_ID', "\"${oktaProperties.getProperty('clientId')}\""
    buildConfigField "String", 'SIGN_IN_REDIRECT_URI', "\"${oktaProperties.getProperty('signInRedirectUri')}\""
    buildConfigField "String", 'SIGN_OUT_REDIRECT_URI', "\"${oktaProperties.getProperty('signOutRedirectUri')}\""
    buildConfigField "String", 'USER_INFOS_URI', "\"${oktaProperties.getProperty('userInfosUri')}\""
    buildConfigField "String", 'TEST_LOCAL_API_BASE_URL', "\"${mobilityProperties.getProperty('testLocalApiBaseUrl')}\""
    buildConfigField "String", 'API_PREPROD_BASE_URL', "\"${mobilityProperties.getProperty('apiPreprodBaseUrl')}\""
    buildConfigField "String", 'API_PROD_BASE_URL', "\"${mobilityProperties.getProperty('apiProdBaseUrl')}\""
}

static def parseScheme(String uri) {
    def index = uri.indexOf(':/')
    if (index == -1) {
        throw new IllegalStateException("Scheme is not in a valid format.")
    }
    return uri.substring(0, index)
}

android.defaultConfig.manifestPlaceholders = [
        "webAuthenticationRedirectScheme": parseScheme(oktaProperties.getProperty('signInRedirectUri'))
]

//kapt {
//    correctErrorTypes true
//}